########################################################################################
# Project: 
#   Managed Kubernetes Services: A Comparison of AKS, EKS and GKE
#
# Author:  
#   Michał Ziemianek
#
# Description:
#   The project focuses on deploying and benchmarking
#   a microservices-based application using Kubernetes and cloud-native technologies
#   (Terraform, Ansible, Helm, Prometheus, Grafana, K6).
#
# License:
#   Apache 2.0
#
# Notes:
#   - This code is intended for educational and research purposes.
#   - Ensure proper configuration of cloud resources before execution.
#
# © 2025 Michał Ziemianek. All rights reserved.
########################################################################################
---

- name: "{{ service_name }} | Create directory to store files"
  ansible.builtin.file:
    path: "{{ tf_destination_directory }}"
    state: directory
    mode: "0755"

# todo: Use https://docs.ansible.com/ansible/latest/collections/community/general/terraform_module.html
- name: "{{ service_name }} | Render tfvars file from template"
  ansible.builtin.template:
    src: "{{ tf_vars_template_file_path }}"
    dest: "{{ tf_vars_file_path }}"
    mode: "0600"

- name: "{{ service_name }} | Run Terraform init actions"
  environment: "{{ tf_environment }}"
  block:
    - name: "{{ service_name }} | Initialize Terraform"
      ansible.builtin.command:
        cmd: terraform -chdir="{{ tf_directory }}" init -lock=true -input=false -no-color -backend-config=backend.hcl
      register: tf_init_output
      changed_when: tf_init_output.rc != 0

    - name: "{{ service_name }} | Check if Terraform workspace exists"
      ansible.builtin.command:
        cmd: terraform -chdir="{{ tf_directory }}" workspace list -no-color
      register: workspace_list
      changed_when: workspace_list.rc != 0

    # todo: refactor this xD
    - name: "{{ service_name }} | Create or select Terraform workspace"
      ansible.builtin.command:
        cmd: >
          {% if tf_workspace in workspace_list.stdout %}
          terraform -chdir="{{ tf_directory }}" workspace select {{ tf_workspace }} -no-color
          {% else %}
          terraform -chdir="{{ tf_directory }}" workspace new {{ tf_workspace }} -no-color
          {% endif %}
      register: tf_workspace_output
      changed_when: tf_workspace_output.rc != 0

    - name: "{{ service_name }} | Format Terraform files"
      ansible.builtin.command:
        cmd: terraform -chdir="{{ tf_directory }}" fmt -no-color -check -recursive -diff
      register: tf_fmt_output
      changed_when: tf_fmt_output.rc != 0

    - name: "{{ service_name }} | Validate Terraform configuration"
      ansible.builtin.command:
        cmd: terraform -chdir="{{ tf_directory }}" validate -no-color
      register: tf_validate_output
      changed_when: tf_validate_output.rc != 0

    - name: "{{ service_name }} | Run Terraform plan and save the plan file"
      ansible.builtin.command:
        cmd: terraform -chdir="{{ tf_directory }}" plan -no-color -out="{{ tf_plan_file_path }}" -var-file="{{ tf_vars_file_path }}"
      register: tf_plan_output
      changed_when: tf_plan_output.rc != 0

    - name: "{{ service_name }} | Display Terraform plan result"
      ansible.builtin.debug:
        msg: "{{ tf_plan_output.stdout }}"
